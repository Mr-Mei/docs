import{_ as n,o as s,c as a,e as p}from"./app-58db18e7.js";const t={},e=p(`<h1 id="jtemplate语法" tabindex="-1"><a class="header-anchor" href="#jtemplate语法" aria-hidden="true">#</a> JTemplate语法</h1><p>jtemplate, 它是客户端基于javascript的模板引擎，绑定的数据为json对象。服务端只需要把对象集合序列化成json格式并传入客户端，客户端再把json对象填充模版生成列表，一、服务端传输的只是json格式的字符串，传输的数据量可是大大减少了，二 、遍历绑定的工作转移到了客户端，大大减轻了服务端的压力。</p><p>为什么要用 js template 为什么要 模版呢，</p><p>以下应用场景可以使用模板引擎：</p><p>1、如果你有动态ajax请求数据并需要封装成视图展现给用户，想要提高自己的工作效率。 2、如果你是拼串族或者数组push族，迫切的希望改变现有的书写方式。一直拼JS代码多不易维护可读性差 3、如果你在页面布局中，存在共性模块和布局，你可以提取出公共模板，减少维护的数量。 4、还可以使用循环\\判断等语句, 减少工作量</p><p><strong>要使用jtemplate首先要引入两个js脚本文件：</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Scripts/jquery.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Scripts/jquery-jtemplates.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意的是，jtemplate是在<strong>jquery</strong>的基础上实现的，所以脚本的引入顺序不能颠倒，否则会报错。</p><p>这些脚本可到http://jtemplates.tpython.com/去下载。</p><h2 id="_1-if-语法" tabindex="-1"><a class="header-anchor" href="#_1-if-语法" aria-hidden="true">#</a> 1.#if 语法</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token punctuation">{</span>#<span class="token keyword">if</span> <span class="token operator">|</span><span class="token constant">COND</span><span class="token operator">|</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span>#elseif <span class="token operator">|</span><span class="token constant">COND</span><span class="token operator">|</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span>#<span class="token keyword">else</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span>#<span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span>

  \\#<span class="token keyword">if</span> <span class="token literal-property property">示例</span><span class="token operator">:</span>

  <span class="token punctuation">{</span>#<span class="token keyword">if</span> $<span class="token constant">T</span><span class="token punctuation">.</span>hello<span class="token punctuation">}</span> hello world<span class="token punctuation">.</span> <span class="token punctuation">{</span>#<span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span>

  <span class="token punctuation">{</span>#<span class="token keyword">if</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">==</span><span class="token number">16</span><span class="token punctuation">}</span> good <span class="token punctuation">{</span>#<span class="token keyword">else</span><span class="token punctuation">}</span> fail <span class="token punctuation">{</span>#<span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span>

  <span class="token punctuation">{</span>#<span class="token keyword">if</span> $<span class="token constant">T</span><span class="token punctuation">.</span>age<span class="token operator">&gt;=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">}</span> 成人了 <span class="token punctuation">{</span>#<span class="token keyword">else</span><span class="token punctuation">}</span> 未成年 <span class="token punctuation">{</span>#<span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span>

<span class="token punctuation">{</span>#<span class="token keyword">if</span> $<span class="token constant">T</span><span class="token punctuation">.</span>list_id <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">}</span> System list <span class="token punctuation">{</span>#elseif $<span class="token constant">T</span><span class="token punctuation">.</span>list_id <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">}</span> Users List <span class="token punctuation">{</span>#elseif $<span class="token constant">T</span><span class="token punctuation">.</span>list_id <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">}</span> Errors list <span class="token punctuation">{</span>#<span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-for-语法" tabindex="-1"><a class="header-anchor" href="#_2-for-语法" aria-hidden="true">#</a> 2.#for 语法</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>#<span class="token keyword">for</span> <span class="token operator">|</span><span class="token constant">VAR</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token operator">|</span><span class="token constant">CODE</span><span class="token operator">|</span> to <span class="token operator">|</span><span class="token constant">CODE</span><span class="token operator">|</span> <span class="token punctuation">[</span>step<span class="token operator">=</span><span class="token operator">|</span><span class="token constant">CODE</span><span class="token operator">|</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span>#<span class="token keyword">else</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span>#<span class="token operator">/</span><span class="token keyword">for</span><span class="token punctuation">}</span>

  或

  <span class="token punctuation">{</span>#<span class="token keyword">for</span> <span class="token operator">|</span>variable<span class="token operator">|</span> <span class="token operator">=</span> <span class="token operator">|</span>start<span class="token operator">|</span> to <span class="token operator">|</span>end<span class="token operator">|</span> <span class="token punctuation">[</span>step<span class="token operator">=</span><span class="token operator">|</span>stepBy<span class="token operator">|</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span>#<span class="token keyword">else</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span>#<span class="token operator">/</span><span class="token keyword">for</span><span class="token punctuation">}</span>

  \\#<span class="token keyword">for</span> 示例：

  默认步长：<span class="token punctuation">{</span>#<span class="token keyword">for</span> index <span class="token operator">=</span> <span class="token number">1</span> to <span class="token number">10</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>$<span class="token constant">T</span><span class="token punctuation">.</span>index<span class="token punctuation">}</span> <span class="token punctuation">{</span>#<span class="token operator">/</span><span class="token keyword">for</span><span class="token punctuation">}</span>

  正向步长：<span class="token punctuation">{</span>#<span class="token keyword">for</span> index <span class="token operator">=</span> <span class="token number">1</span> to <span class="token number">10</span> step<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>$<span class="token constant">T</span><span class="token punctuation">.</span>index<span class="token punctuation">}</span> <span class="token punctuation">{</span>#<span class="token operator">/</span><span class="token keyword">for</span><span class="token punctuation">}</span>

  负向步长及空循环：<span class="token punctuation">{</span>#<span class="token keyword">for</span> index <span class="token operator">=</span> <span class="token number">1</span> to <span class="token number">10</span> step<span class="token operator">=</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>$<span class="token constant">T</span><span class="token punctuation">.</span>index<span class="token punctuation">}</span> <span class="token punctuation">{</span>#<span class="token keyword">else</span><span class="token punctuation">}</span> nothing <span class="token punctuation">{</span>#<span class="token operator">/</span><span class="token keyword">for</span><span class="token punctuation">}</span>

  也可以在循环中使用变量：<span class="token punctuation">{</span>#<span class="token keyword">for</span> index <span class="token operator">=</span> $<span class="token constant">T</span><span class="token punctuation">.</span>start to $<span class="token constant">T</span><span class="token punctuation">.</span>end step<span class="token operator">=</span>$<span class="token constant">T</span><span class="token punctuation">.</span>step<span class="token punctuation">}</span> <span class="token punctuation">{</span>$<span class="token constant">T</span><span class="token punctuation">.</span>index<span class="token punctuation">}</span> <span class="token punctuation">{</span>#<span class="token operator">/</span><span class="token keyword">for</span><span class="token punctuation">}</span>

  说明：<span class="token punctuation">{</span>#<span class="token keyword">else</span><span class="token punctuation">}</span>是在<span class="token punctuation">{</span>#<span class="token keyword">for</span><span class="token operator">...</span><span class="token punctuation">}</span>未能执行的时的输出内容。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-foreach-语法" tabindex="-1"><a class="header-anchor" href="#_3-foreach-语法" aria-hidden="true">#</a> 3.#foreach 语法：</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>#foreach <span class="token operator">|</span><span class="token constant">VAR</span><span class="token operator">|</span> <span class="token keyword">as</span> <span class="token operator">|</span><span class="token constant">NAME</span><span class="token operator">|</span> <span class="token punctuation">[</span>begin<span class="token operator">=</span><span class="token operator">|</span><span class="token constant">CODE</span><span class="token operator">|</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>count<span class="token operator">=</span><span class="token operator">|</span><span class="token constant">CODE</span><span class="token operator">|</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>step<span class="token operator">=</span><span class="token operator">|</span><span class="token constant">CODE</span><span class="token operator">|</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span>#<span class="token keyword">else</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span>#<span class="token operator">/</span><span class="token keyword">for</span><span class="token punctuation">}</span>

  \\#foreach 示例：

  默认：<span class="token punctuation">{</span>#foreach $<span class="token constant">T</span><span class="token punctuation">.</span>table <span class="token keyword">as</span> record<span class="token punctuation">}</span> <span class="token punctuation">{</span>$<span class="token constant">T</span><span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">}</span> <span class="token punctuation">{</span>#<span class="token operator">/</span><span class="token keyword">for</span><span class="token punctuation">}</span>

  指定起始位置：<span class="token punctuation">{</span>#foreach $<span class="token constant">T</span><span class="token punctuation">.</span>table <span class="token keyword">as</span> record begin<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>$<span class="token constant">T</span><span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">}</span> <span class="token punctuation">{</span>#<span class="token operator">/</span><span class="token keyword">for</span><span class="token punctuation">}</span>

  指定起始和循环次数：<span class="token punctuation">{</span>#foreach $<span class="token constant">T</span><span class="token punctuation">.</span>table <span class="token keyword">as</span> record begin<span class="token operator">=</span><span class="token number">1</span> count<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>$<span class="token constant">T</span><span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">}</span> <span class="token punctuation">{</span>#<span class="token operator">/</span><span class="token keyword">for</span><span class="token punctuation">}</span>

  指定步长：<span class="token punctuation">{</span>#foreach $<span class="token constant">T</span><span class="token punctuation">.</span>table <span class="token keyword">as</span> record step<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>$<span class="token constant">T</span><span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">}</span> <span class="token punctuation">{</span>#<span class="token operator">/</span><span class="token keyword">for</span><span class="token punctuation">}</span>

  \\#foreach 内定环境变量：

  $index <span class="token operator">-</span> index <span class="token keyword">of</span> element <span class="token keyword">in</span> table  $<span class="token constant">T</span><span class="token punctuation">.</span>record$index

  $iteration <span class="token operator">-</span> id <span class="token keyword">of</span> <span class="token function">iteration</span> <span class="token punctuation">(</span>next number begin from <span class="token number">0</span><span class="token punctuation">)</span>

  $first <span class="token operator">-</span> is first iteration<span class="token operator">?</span>

  $last <span class="token operator">-</span> is last iteration<span class="token operator">?</span>

  $total <span class="token operator">-</span> total number <span class="token keyword">of</span> iterations

  $key <span class="token operator">-</span> key <span class="token keyword">in</span> <span class="token function">object</span> <span class="token punctuation">(</span>name <span class="token keyword">of</span> element<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">0.6</span><span class="token number">.0</span><span class="token operator">+</span><span class="token punctuation">)</span>

  $<span class="token keyword">typeof</span> <span class="token operator">-</span> type <span class="token keyword">of</span> <span class="token function">element</span> <span class="token punctuation">(</span><span class="token number">0.6</span><span class="token number">.0</span><span class="token operator">+</span><span class="token punctuation">)</span>

  \\#foreach 示例所需要的数据：

  <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>

  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;User list&#39;</span><span class="token punctuation">,</span>

  <span class="token literal-property property">list_id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>

  <span class="token literal-property property">table</span><span class="token operator">:</span> <span class="token punctuation">[</span>

  <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Anne&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token literal-property property">mail</span><span class="token operator">:</span> <span class="token string">&#39;anne@domain.com&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Amelie&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token literal-property property">mail</span><span class="token operator">:</span> <span class="token string">&#39;amelie@domain.com&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Polly&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token literal-property property">mail</span><span class="token operator">:</span> <span class="token string">&#39;polly@domain.com&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token literal-property property">mail</span><span class="token operator">:</span> <span class="token string">&#39;alice@domain.com&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Martha&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token literal-property property">mail</span><span class="token operator">:</span> <span class="token string">&#39;martha@domain.com&#39;</span><span class="token punctuation">}</span>

  <span class="token punctuation">]</span>

  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token punctuation">(</span><span class="token number">0.7</span><span class="token number">.0</span><span class="token operator">+</span><span class="token punctuation">)</span>版以后新增的功能，支持待循环集合用函数代替：

  <span class="token punctuation">{</span>#foreach <span class="token operator">|</span><span class="token constant">FUNC</span><span class="token operator">|</span> <span class="token keyword">as</span> <span class="token operator">|</span><span class="token constant">NAME</span><span class="token operator">|</span> <span class="token punctuation">[</span>begin<span class="token operator">=</span><span class="token operator">|</span><span class="token constant">CODE</span><span class="token operator">|</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>end<span class="token operator">=</span><span class="token operator">|</span><span class="token constant">CODE</span><span class="token operator">|</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>count<span class="token operator">=</span><span class="token operator">|</span><span class="token constant">CODE</span><span class="token operator">|</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>step<span class="token operator">=</span><span class="token operator">|</span><span class="token constant">CODE</span><span class="token operator">|</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span>#<span class="token keyword">else</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span>#<span class="token operator">/</span><span class="token keyword">for</span><span class="token punctuation">}</span>

  例：

  <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">step</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>step <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// stop if loop is too long</span>

  <span class="token keyword">return</span> <span class="token string">&quot;Step &quot;</span> <span class="token operator">+</span> step<span class="token punctuation">;</span>

  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#result&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTemplate</span><span class="token punctuation">(</span><span class="token string">&quot;{#foreach f as funcValue begin=10 end=20} {$T.funcValue}&lt;br/&gt; {#/for}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#result&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">processTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

\\#foreach在每次循环时请求的就是f函数，然后传递参数给f使用，并返回结果给funcValue变量
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-cycle-语法" tabindex="-1"><a class="header-anchor" href="#_4-cycle-语法" aria-hidden="true">#</a> 4.#cycle 语法：</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token punctuation">{</span>#cycle values<span class="token operator">=</span><span class="token operator">|</span><span class="token constant">ARRAY</span><span class="token operator">|</span><span class="token punctuation">}</span>

  功能：提供周期性的调用，在循环中实现交替样式功能时可用到

  示例：

  <span class="token punctuation">{</span>#cycle values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span>

  下面模板在执行循环时，就会周期性的调用#cycle数组中的值，这样就能实现行交替的效果<span class="token operator">:</span>

    <span class="token operator">&lt;</span>table width<span class="token operator">=</span>\\&quot;<span class="token number">200</span>\\&quot;<span class="token operator">&gt;</span>

  <span class="token punctuation">{</span>#foreach $<span class="token constant">T</span><span class="token punctuation">.</span>table <span class="token keyword">as</span> row<span class="token punctuation">}</span>

  <span class="token operator">&lt;</span>tr bgcolor<span class="token operator">=</span>\\&quot;<span class="token punctuation">{</span>#cycle values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;#AAAAAA&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;#CCCCCC&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>\\&quot;<span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token punctuation">{</span>$<span class="token constant">T</span><span class="token punctuation">.</span>row<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">link</span><span class="token punctuation">(</span><span class="token string">&#39;mailto:&#39;</span><span class="token operator">+</span>$<span class="token constant">T</span><span class="token punctuation">.</span>row<span class="token punctuation">.</span>mail<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>

  <span class="token punctuation">{</span>#<span class="token operator">/</span><span class="token keyword">for</span><span class="token punctuation">}</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-include-语法" tabindex="-1"><a class="header-anchor" href="#_5-include-语法" aria-hidden="true">#</a> 5.#include 语法：</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token punctuation">{</span>#include <span class="token operator">|</span><span class="token constant">NAME</span><span class="token operator">|</span> <span class="token punctuation">[</span>root<span class="token operator">=</span><span class="token operator">|</span><span class="token constant">VAR</span><span class="token operator">|</span><span class="token punctuation">]</span><span class="token punctuation">}</span>

  功能：提供子模板调用

  示例：

  <span class="token punctuation">{</span>#template <span class="token constant">MAIN</span><span class="token punctuation">}</span>

    <span class="token operator">&lt;</span>table<span class="token operator">&gt;</span>

  <span class="token punctuation">{</span>#foreach $<span class="token constant">T</span><span class="token punctuation">.</span>table <span class="token keyword">as</span> record<span class="token punctuation">}</span>

  <span class="token punctuation">{</span>#include <span class="token constant">ROW</span> root<span class="token operator">=</span>$<span class="token constant">T</span><span class="token punctuation">.</span>record<span class="token punctuation">}</span>

  <span class="token punctuation">{</span>#<span class="token operator">/</span><span class="token keyword">for</span><span class="token punctuation">}</span>

  <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">&gt;</span>

  <span class="token punctuation">{</span>#<span class="token operator">/</span>template <span class="token constant">MAIN</span><span class="token punctuation">}</span>

  <span class="token punctuation">{</span>#template <span class="token constant">ROW</span><span class="token punctuation">}</span>

  <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;values=[&#39;bcEEC&#39;,&#39;bcCEE&#39;]} {#cycle&quot;</span><span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token punctuation">{</span>$<span class="token constant">T</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token punctuation">{</span>$<span class="token constant">T</span><span class="token punctuation">.</span>mail<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>

  <span class="token punctuation">{</span>#<span class="token operator">/</span>template <span class="token constant">ROW</span><span class="token punctuation">}</span>

  说明：<span class="token punctuation">{</span>#template <span class="token constant">MAIN</span><span class="token punctuation">}</span> 是指定模板的主要部分，必不可少。

  <span class="token punctuation">{</span>#template <span class="token constant">ROW</span><span class="token punctuation">}</span>是定义一个名为“<span class="token constant">ROW</span>”的子模板。

<span class="token punctuation">{</span>#include <span class="token constant">ROW</span> root<span class="token operator">=</span>$<span class="token constant">T</span><span class="token punctuation">.</span>record<span class="token punctuation">}</span>是主模板调用“<span class="token constant">ROW</span>”子模板，并传递参数$<span class="token constant">T</span><span class="token punctuation">.</span>record
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-param-语法" tabindex="-1"><a class="header-anchor" href="#_6-param-语法" aria-hidden="true">#</a> 6.#param 语法：</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token punctuation">{</span>#param name<span class="token operator">=</span><span class="token operator">|</span><span class="token constant">NAME</span><span class="token operator">|</span> value<span class="token operator">=</span><span class="token operator">|</span><span class="token constant">CODE</span><span class="token operator">|</span><span class="token punctuation">}</span>

  功能：定义模板内的局部变量参数，使用$<span class="token constant">P</span>调用。

  示例：

  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#result&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTemplate</span><span class="token punctuation">(</span><span class="token string">&quot;{#param name=x value=888}{$P.x}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#result&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">processTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  输出结果：<span class="token number">888</span>

  示例：

  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#result&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTemplate</span><span class="token punctuation">(</span><span class="token string">&quot;{#param name=x value=$P.x+1}{$P.x}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#result&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParam</span><span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#result&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">processTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  输出结果：<span class="token number">778</span>

  示例：

  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#result&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTemplate</span><span class="token punctuation">(</span>&quot;<span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span><span class="token punctuation">{</span>#foreach $<span class="token constant">T</span><span class="token punctuation">.</span>table <span class="token keyword">as</span> row<span class="token punctuation">}</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token punctuation">{</span>$<span class="token constant">P</span><span class="token punctuation">.</span>x<span class="token punctuation">}</span> <span class="token punctuation">{</span>$<span class="token constant">T</span><span class="token punctuation">.</span>row<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>

  <span class="token punctuation">{</span>#param name<span class="token operator">=</span>x value<span class="token operator">=</span>$<span class="token constant">P</span><span class="token punctuation">.</span>x<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">{</span>#<span class="token operator">/</span><span class="token keyword">for</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>&quot;<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#result&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParam</span><span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#result&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">processTemplate</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

  需要数据：

  <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>

  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;User list&#39;</span><span class="token punctuation">,</span>

  <span class="token literal-property property">list_id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>

  <span class="token literal-property property">table</span><span class="token operator">:</span> <span class="token punctuation">[</span>

  <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Anne&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token literal-property property">mail</span><span class="token operator">:</span> <span class="token string">&#39;anne@domain.com&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Amelie&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token literal-property property">mail</span><span class="token operator">:</span> <span class="token string">&#39;amelie@domain.com&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Polly&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token literal-property property">mail</span><span class="token operator">:</span> <span class="token string">&#39;polly@domain.com&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token literal-property property">mail</span><span class="token operator">:</span> <span class="token string">&#39;alice@domain.com&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Martha&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token literal-property property">mail</span><span class="token operator">:</span> <span class="token string">&#39;martha@domain.com&#39;</span><span class="token punctuation">}</span>

  <span class="token punctuation">]</span>

  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  输出结果：

  <span class="token number">1</span> Anne

  <span class="token number">4</span> Amelia

  <span class="token number">7</span> Polly

  <span class="token number">10</span> Alice

  <span class="token number">13</span> Martha
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),o=[e];function c(l,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","JTemplate语法.html.vue"]]);export{u as default};
